import numpy as np
from scipy import signal
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import time
import serial
import struct

### GET DATA ###
# Ts = 0.03 #0.003 #sample period.
# N = 100 #amount of samples.
# data = []
# t = np.linspace(0,N*Ts,N)

# s = serial.Serial(port='COM3', baudrate=115200)

# f = open("DCmotor3.txt", "w")
# for i in range(N):
#     # if(i < 10):
#     #     data.append(0)
#     #     #print(data[i])
#     # else:
#     data.append(struct.unpack('<f', s.read(4))[0])
#     #print(data[i])
#     #data.append(i-100)
#     f.write(str(data[i]))
#     f.write(',')
# f.close()

# plt.step(t, data)
# plt.grid()
# plt.show()

### SYSTEM IDENTIFICATION ###
# data = [48.23771667480469,76.02057647705078,90.2255630493164,100.60362243652344,109.361328125,114.7885971069336,116.87704467773438,120.2501220703125,125.93930053710938,127.73023223876953,131.93772888183594,131.36001586914062,133.9046630859375,135.76502990722656,139.36634826660156,141.6898956298828,139.94496154785156,142.423095703125,144.9765625,146.67774963378906,148.0750274658203,144.52259826660156,146.20594787597656,148.6399383544922,150.3985595703125,146.37002563476562,147.6886749267578,149.76785278320312,151.39280700683594,147.30433654785156,148.5810546875,150.45135498046875,151.82186889648438,147.67413330078125,148.89076232910156,150.74620056152344,152.06813049316406,147.86337280273438,149.0757293701172,150.94338989257812,152.28427124023438,148.0238800048828,149.23146057128906,151.14111328125,152.49327087402344,148.36061096191406,149.71554565429688,151.77577209472656,153.08465576171875,148.91293334960938,150.38348388671875,152.47776794433594,153.9093017578125,149.60354614257812,150.8750762939453,152.9285888671875,154.09902954101562,149.73048400878906,150.83714294433594,152.58633422851562,153.9250946044922,149.58863830566406,150.74620056152344,152.609619140625,153.8067169189453,149.3949432373047,150.58729553222656,152.5630645751953,153.74365234375,149.4098358154297,150.6024169921875,152.40805053710938,149.54388427734375,150.7992401123047,152.30746459960938,153.09246826171875,149.58863830566406,150.6856231689453,152.20700073242188,152.97537231445312,149.46939086914062,150.7083282470703,152.19927978515625,152.91299438476562,149.4023895263672,150.6477813720703,152.20700073242188,152.97537231445312,149.46194458007812,150.7083282470703,152.0604248046875,152.87403869628906,149.3726348876953,150.6629180908203,152.12982177734375,152.81173706054688,149.36520385742188,150.7083282470703,152.15296936035156,152.91299438476562]
# Ts = 0.003 #0.004 #sample period.
# N = 100 #amount of samples.
# tdata = np.linspace(2*Ts,(N+2)*Ts,N)
# t = np.linspace(0*Ts,(N+0)*Ts,N)

# P = signal.TransferFunction([25],[0.019,1]) #continuous time plant.
# t, y = signal.step(P, T = t)
# plt.plot(t, 6*y)

# plt.title('STEP RESPONSE (OPEN LOOP)')
# plt.ylabel('speed [RPM]')
# plt.xlabel('time [sec]')

# plt.step(tdata, data)
# plt.grid()
# plt.show()

# Pd = signal.TransferFunction([3.6515],[1,-0.8539],dt=Ts) #discrete time plant.
# t, y = signal.dstep(Pd, t = t)
# plt.step(t, 6*np.squeeze(y))

# plt.title('STEP RESPONSE (OPEN LOOP)')
# plt.ylabel('speed [RPM]')
# plt.xlabel('time [sec]')

# plt.step(tdata, data)
# plt.grid()
# plt.show()

### CLOSED LOOP ###
data2 = [49.036434173583984,49.722381591796875,66.53655242919922,88.00492858886719,106.3905258178711,122.83000183105469,133.666015625,141.41604614257812,148.9499053955078,147.59420776367188,151.998779296875,149.20176696777344,153.02218627929688,150.57217407226562,152.52427673339844,149.86512756347656,151.77577209472656,149.1646728515625,151.37753295898438,148.95730590820312,151.11065673828125,148.80213928222656,150.62509155273438,147.42015075683594,150.98898315429688,147.8269500732422,151.36990356445312,148.14083862304688,151.53811645507812,148.33860778808594,151.63002014160156,148.3092803955078,151.59938049316406,148.353271484375,151.65301513671875,148.40464782714844,151.70669555664062,148.36795043945312,152.0449981689453,149.8501434326172,151.9602813720703,149.5215301513672,151.54576110839844,147.4926300048828,150.89784240722656,147.76141357421875,151.2859344482422,148.118896484375,151.53811645507812,148.1847381591797,151.6606903076172,148.39730834960938,151.72972106933594,148.353271484375,151.8295440673828,149.68565368652344,151.91412353515625,149.53643798828125,151.53045654296875,147.5506591796875,150.92820739746094,147.79052734375,151.29356384277344,148.06040954589844,151.57640075683594,148.1920623779297,151.73739624023438,148.33860778808594,151.80650329589844,148.36795043945312,152.10667419433594,149.7977752685547,151.97567749023438,149.43960571289062,151.45396423339844,147.61599731445312,150.8599090576172,147.65232849121094,151.24778747558594,148.03848266601562,151.63002014160156,148.118896484375,151.77577209472656,]
data3 = [46.6374397277832,50.209205627441406,62.0052490234375,71.65890502929688,82.23233032226562,85.7657470703125,94.99683380126953,99.15716552734375,104.13412475585938,111.0576400756836,114.59566497802734,117.32040405273438,121.05560302734375,125.24004364013672,128.42465209960938,129.718505859375,129.79708862304688,132.87271118164062,134.4326934814453,138.95965576171875,140.29180908203125,137.08018493652344,142.2205352783203,143.62313842773438,141.1764678955078,144.66197204589844,141.90435791015625,144.30014038085938,144.1614532470703,145.82928466796875,147.74685668945312,144.33485412597656,149.1795196533203,145.4615936279297,149.04611206054688,146.27723693847656,147.8196563720703,151.00418090820312,146.64190673828125,147.62326049804688,148.1554718017578,148.21401977539062,148.58840942382812,148.44871520996094,148.9425048828125,148.72837829589844,149.20176696777344,148.9868927001953,149.3428955078125,149.1795196533203,149.53643798828125,149.3428955078125,149.61846923828125,149.3726348876953,149.70806884765625,153.2175750732422,149.23887634277344,152.78060913085938,148.846435546875,152.57081604003906,148.72837829589844,152.4855194091797,148.06040954589844,148.713623046875,149.32058715820312,149.135009765625,149.91004943847656,152.8506622314453,148.86859130859375,152.44677734375,147.9946746826172,148.7062530517578,149.4023895263672,152.87403869628906,148.66940307617188,148.61785888671875,149.3428955078125,152.990966796875,148.7431182861328,152.60186767578125,148.111572265625,148.8316650390625,149.28343200683594,152.87403869628906,148.2872772216797,149.00909423828125,149.2982940673828,152.98316955566406,148.7209930419922,152.57081604003906,]
Ts = 0.03 #0.004 #sample period.
N2 = 83 #amount of samples.
N3 = 90
tdata2 = np.linspace(0*Ts,(N2+0)*Ts,N2)
tdata3 = np.linspace(0*Ts,(N3+0)*Ts,N3)

Td = signal.TransferFunction([0.43362,-0.32],[1,-0.7725,-0.11434],dt=Ts) #discrete time system.
t, y = signal.dstep(Td, t = tdata3)
plt.step(t, 150*np.squeeze(y))

# Td2 = signal.TransferFunction([0.10419,0.10419],[1,-1.102,0.3104],dt=Ts) #discrete time system.
# t, y = signal.dstep(Td2, t = tdata3)
# plt.step(t, 150*np.squeeze(y))

plt.title('STEP RESPONSE (CLOSED LOOP)')
plt.ylabel('speed [RPM]')
plt.xlabel('time [sec]')

#plt.step(tdata2, data2)
plt.step(tdata3, data3)
plt.grid()
plt.show()

### ANIMATION ###
# fig, axis = plt.subplots()
# fig.suptitle('DC MOTOR', fontsize=12)
# axis.set_ylabel('speed [RPM]')
# axis.set_xlabel('time [sec]')
# axis.set_ylim(45, 305)
# axis.set_xlim(0, 3)

# t0 = 0
# N = 100
# Ts = 0.03
# data = np.zeros(N)
# t = np.linspace(0*Ts,(N+0)*Ts,N)
# plt.grid()
# splt, = plt.step([], [])

# s = serial.Serial(port='COM3', baudrate=115200)

# def update(frame):
#     global data,t0

#     #s.write('DCM'.encode())
#     data = np.append(data, struct.unpack('<f', s.read(4))[0])
#     data = data[1:]
#     splt.set_data(t, data)

#     # t1 = time.time()
#     # print(t1 - t0)
#     # t0 = time.time()

#     return splt,

# ani = FuncAnimation(fig, update, blit=True, interval=1)
# plt.show()