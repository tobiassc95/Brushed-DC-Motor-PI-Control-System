
DCmotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d0  080052d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080052d0  080052d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d0  080052d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d0  080052d0  000152d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  080052e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080052e4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6c4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017f3  00000000  00000000  0002b700  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c520  00000000  00000000  0002e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c19  00000000  00000000  0004aac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab786  00000000  00000000  000536d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fee5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  000feedc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005280 	.word	0x08005280

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005280 	.word	0x08005280

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <PWMsetpulse>:
float PIcontroller(float e_1); //PI controller.
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWMsetpulse(uint16_t pulse) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a72:	2360      	movs	r3, #96	; 0x60
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulse;
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]

  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	2200      	movs	r2, #0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <PWMsetpulse+0x4c>)
 8000a8c:	f002 fefe 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a90:	2100      	movs	r1, #0
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <PWMsetpulse+0x4c>)
 8000a94:	f002 fc3a 	bl	800330c <HAL_TIM_PWM_Start>
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000078 	.word	0x20000078
 8000aa4:	00000000 	.word	0x00000000

08000aa8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	static bool newvalue = false;
	uint16_t value1, value2, value;

	if (!measure)
 8000ab0:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f083 0301 	eor.w	r3, r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d15f      	bne.n	8000b7e <HAL_TIM_IC_CaptureCallback+0xd6>
		return;

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) { //if interrupt source is channel 1
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7f1b      	ldrb	r3, [r3, #28]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d15c      	bne.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xd8>
		if (!newvalue) {
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	f083 0301 	eor.w	r3, r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d009      	beq.n	8000ae8 <HAL_TIM_IC_CaptureCallback+0x40>
			value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //capture the first value
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f003 f8aa 	bl	8003c30 <HAL_TIM_ReadCapturedValue>
 8000adc:	4603      	mov	r3, r0
 8000ade:	817b      	strh	r3, [r7, #10]
			newvalue = true;
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e04b      	b.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xd8>
		}
		else if (newvalue) {
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d047      	beq.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xd8>
			value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //capture second value
 8000af0:	2100      	movs	r1, #0
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f003 f89c 	bl	8003c30 <HAL_TIM_ReadCapturedValue>
 8000af8:	4603      	mov	r3, r0
 8000afa:	81bb      	strh	r3, [r7, #12]
			if (value2 > value1) {
 8000afc:	89ba      	ldrh	r2, [r7, #12]
 8000afe:	897b      	ldrh	r3, [r7, #10]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d904      	bls.n	8000b0e <HAL_TIM_IC_CaptureCallback+0x66>
				value = value2 - value1; //calculate the difference
 8000b04:	89ba      	ldrh	r2, [r7, #12]
 8000b06:	897b      	ldrh	r3, [r7, #10]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	81fb      	strh	r3, [r7, #14]
 8000b0c:	e00e      	b.n	8000b2c <HAL_TIM_IC_CaptureCallback+0x84>
			}
			else if (value2 < value1) {
 8000b0e:	89ba      	ldrh	r2, [r7, #12]
 8000b10:	897b      	ldrh	r3, [r7, #10]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d20a      	bcs.n	8000b2c <HAL_TIM_IC_CaptureCallback+0x84>
				value = ((htim->Init.Period - value1) + value2) + 1;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	897b      	ldrh	r3, [r7, #10]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3301      	adds	r3, #1
 8000b2a:	81fb      	strh	r3, [r7, #14]
			}
//			else {
//				Error_Handler();
//			}
//			value1 = value2;
			newvalue = false;  //reset the first captured
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			motorRPM = 0.15*HAL_RCC_GetPCLK1Freq()/value; //calculate frequency (RPM)
 8000b32:	f002 f929 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fc8f 	bl	800045c <__aeabi_ui2d>
 8000b3e:	a312      	add	r3, pc, #72	; (adr r3, 8000b88 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	f7ff fd04 	bl	8000550 <__aeabi_dmul>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	4625      	mov	r5, r4
 8000b4e:	461c      	mov	r4, r3
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fc92 	bl	800047c <__aeabi_i2d>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	f7ff fe20 	bl	80007a4 <__aeabi_ddiv>
 8000b64:	4603      	mov	r3, r0
 8000b66:	460c      	mov	r4, r1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	f7ff ff22 	bl	80009b4 <__aeabi_d2f>
 8000b70:	4602      	mov	r2, r0
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000b74:	601a      	str	r2, [r3, #0]
			newRPM = true;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e000      	b.n	8000b80 <HAL_TIM_IC_CaptureCallback+0xd8>
		return;
 8000b7e:	bf00      	nop
		}
	}
}
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bdb0      	pop	{r4, r5, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	33333333 	.word	0x33333333
 8000b8c:	3fc33333 	.word	0x3fc33333
 8000b90:	2000002d 	.word	0x2000002d
 8000b94:	2000002e 	.word	0x2000002e
 8000b98:	20000028 	.word	0x20000028
 8000b9c:	2000002c 	.word	0x2000002c

08000ba0 <PIcontroller>:
	e_ = e_1;

	return u_1;
}

float PIcontroller(float e_1) {
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float e_ = 0;
	static float u_ = 0;
	float u_1;

	u_1 = u_ + 0.02185*e_1 - 0.01615*e_;
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <PIcontroller+0x98>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc76 	bl	80004a0 <__aeabi_f2d>
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460d      	mov	r5, r1
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fc71 	bl	80004a0 <__aeabi_f2d>
 8000bbe:	a31a      	add	r3, pc, #104	; (adr r3, 8000c28 <PIcontroller+0x88>)
 8000bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc4:	f7ff fcc4 	bl	8000550 <__aeabi_dmul>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4620      	mov	r0, r4
 8000bce:	4629      	mov	r1, r5
 8000bd0:	f7ff fb08 	bl	80001e4 <__adddf3>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	4625      	mov	r5, r4
 8000bda:	461c      	mov	r4, r3
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <PIcontroller+0x9c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc5d 	bl	80004a0 <__aeabi_f2d>
 8000be6:	a312      	add	r3, pc, #72	; (adr r3, 8000c30 <PIcontroller+0x90>)
 8000be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bec:	f7ff fcb0 	bl	8000550 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	f7ff faf2 	bl	80001e0 <__aeabi_dsub>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	460c      	mov	r4, r1
 8000c00:	4618      	mov	r0, r3
 8000c02:	4621      	mov	r1, r4
 8000c04:	f7ff fed6 	bl	80009b4 <__aeabi_d2f>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60fb      	str	r3, [r7, #12]

	u_ = u_1;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <PIcontroller+0x98>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6013      	str	r3, [r2, #0]
	e_ = e_1;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <PIcontroller+0x9c>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]

	return u_1;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	ee07 3a90 	vmov	s15, r3
}
 8000c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bdb0      	pop	{r4, r5, r7, pc}
 8000c28:	adab9f56 	.word	0xadab9f56
 8000c2c:	3f965fd8 	.word	0x3f965fd8
 8000c30:	27525461 	.word	0x27525461
 8000c34:	3f9089a0 	.word	0x3f9089a0
 8000c38:	20000030 	.word	0x20000030
 8000c3c:	20000034 	.word	0x20000034

08000c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float refRPM = 150; //speed reference (set point).
 8000c46:	4b56      	ldr	r3, [pc, #344]	; (8000da0 <main+0x160>)
 8000c48:	61fb      	str	r3, [r7, #28]
	float uV;
	//uint8_t Ts = 3; //the sample rate (milliseconds) -> SYSTEM IDENTIFICATION
	uint8_t Ts = 30; //the sample rate (milliseconds) -> CONTROLLER
 8000c4a:	231e      	movs	r3, #30
 8000c4c:	76fb      	strb	r3, [r7, #27]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 fc3d 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f8b7 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 fa33 	bl	80010c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c5a:	f000 fa01 	bl	8001060 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c5e:	f000 f915 	bl	8000e8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c62:	f000 f98b 	bl	8000f7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c66:	2100      	movs	r1, #0
 8000c68:	484e      	ldr	r0, [pc, #312]	; (8000da4 <main+0x164>)
 8000c6a:	f002 fb4f 	bl	800330c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	484d      	ldr	r0, [pc, #308]	; (8000da8 <main+0x168>)
 8000c72:	f002 fbe1 	bl	8003438 <HAL_TIM_IC_Start_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, false);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f000 ff49 	bl	8001b14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, true);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	4849      	ldr	r0, [pc, #292]	; (8000dac <main+0x16c>)
 8000c88:	f000 ff44 	bl	8001b14 <HAL_GPIO_WritePin>
  PWMsetpulse(333);
 8000c8c:	f240 104d 	movw	r0, #333	; 0x14d
 8000c90:	f7ff fee0 	bl	8000a54 <PWMsetpulse>
//	  t1 = HAL_GetTick(); //get current time in milliseconds.
//	  if((int32_t)(Ts-(t1-t0)) > 0)
//		  HAL_Delay(Ts-(t1-t0)-1);

	  //CONTROLLER//
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //test pin, to measure sample time.
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4846      	ldr	r0, [pc, #280]	; (8000db0 <main+0x170>)
 8000c98:	f000 ff54 	bl	8001b44 <HAL_GPIO_TogglePin>
	  t0 = HAL_GetTick(); //get current time in milliseconds.
 8000c9c:	f000 fc70 	bl	8001580 <HAL_GetTick>
 8000ca0:	6178      	str	r0, [r7, #20]
	  measure = true;
 8000ca2:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <main+0x174>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
	  while(!newRPM) {
 8000ca8:	bf00      	nop
 8000caa:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <main+0x178>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	f083 0301 	eor.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1f8      	bne.n	8000caa <main+0x6a>

	  }
	  measure = false;
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <main+0x174>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
	  data2send = (uint8_t*) &motorRPM;
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <main+0x17c>)
 8000cc0:	613b      	str	r3, [r7, #16]
//	  HAL_UART_Receive(&huart2, msg, 3, HAL_MAX_DELAY);
//	  if (msg[0] == 'D' && msg[1] == 'C' && msg[2] == 'M')
//		  HAL_UART_Transmit(&huart2, data2send, 4, HAL_MAX_DELAY); //1float = 4bytes.
	  HAL_UART_Transmit(&huart2, data2send, 4, HAL_MAX_DELAY); //1float = 4bytes.
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	483d      	ldr	r0, [pc, #244]	; (8000dc0 <main+0x180>)
 8000ccc:	f003 fe9c 	bl	8004a08 <HAL_UART_Transmit>
	  //uV = IAcontroller(refRPM - motorRPM)*166.667;
	  uV = PIcontroller(refRPM - motorRPM);
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <main+0x17c>)
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f7ff ff5d 	bl	8000ba0 <PIcontroller>
 8000ce6:	ed87 0a03 	vstr	s0, [r7, #12]
	  if(uV >= 2 && uV <= 12)
 8000cea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	db1c      	blt.n	8000d36 <main+0xf6>
 8000cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d00:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	d813      	bhi.n	8000d36 <main+0xf6>
		  PWMsetpulse(uV*166.667);
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f7ff fbc6 	bl	80004a0 <__aeabi_f2d>
 8000d14:	a320      	add	r3, pc, #128	; (adr r3, 8000d98 <main+0x158>)
 8000d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1a:	f7ff fc19 	bl	8000550 <__aeabi_dmul>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	4618      	mov	r0, r3
 8000d24:	4621      	mov	r1, r4
 8000d26:	f7ff fe25 	bl	8000974 <__aeabi_d2uiz>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe90 	bl	8000a54 <PWMsetpulse>
 8000d34:	e019      	b.n	8000d6a <main+0x12a>
	  else {
		  if(uV > 12)
 8000d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d3a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d46:	dd03      	ble.n	8000d50 <main+0x110>
			  PWMsetpulse(2000);
 8000d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d4c:	f7ff fe82 	bl	8000a54 <PWMsetpulse>
		  if(uV < 2)
 8000d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d60:	d503      	bpl.n	8000d6a <main+0x12a>
			  PWMsetpulse(333);
 8000d62:	f240 104d 	movw	r0, #333	; 0x14d
 8000d66:	f7ff fe75 	bl	8000a54 <PWMsetpulse>
	  }
	  newRPM = false;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <main+0x178>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
	  t1 = HAL_GetTick(); //get current time in milliseconds.
 8000d70:	f000 fc06 	bl	8001580 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
	  if((int32_t)(Ts-(t1-t0)) > 0)
 8000d76:	7efa      	ldrb	r2, [r7, #27]
 8000d78:	6979      	ldr	r1, [r7, #20]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dd87      	ble.n	8000c94 <main+0x54>
		  HAL_Delay(Ts-(t1-t0)-1);
 8000d84:	7efa      	ldrb	r2, [r7, #27]
 8000d86:	6979      	ldr	r1, [r7, #20]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1acb      	subs	r3, r1, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fc01 	bl	8001598 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //test pin, to measure sample time.
 8000d96:	e77d      	b.n	8000c94 <main+0x54>
 8000d98:	10624dd3 	.word	0x10624dd3
 8000d9c:	4064d558 	.word	0x4064d558
 8000da0:	43160000 	.word	0x43160000
 8000da4:	20000078 	.word	0x20000078
 8000da8:	20000038 	.word	0x20000038
 8000dac:	48000400 	.word	0x48000400
 8000db0:	48000800 	.word	0x48000800
 8000db4:	2000002d 	.word	0x2000002d
 8000db8:	2000002c 	.word	0x2000002c
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	200000b8 	.word	0x200000b8

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a6      	sub	sp, #152	; 0x98
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dce:	2228      	movs	r2, #40	; 0x28
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fa4c 	bl	8005270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2258      	movs	r2, #88	; 0x58
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 fa3e 	bl	8005270 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8000e10:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fea8 	bl	8001b78 <HAL_RCC_OscConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 f9d7 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	230f      	movs	r3, #15
 8000e34:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2302      	movs	r3, #2
 8000e38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fda9 	bl	80029a4 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e58:	f000 f9c2 	bl	80011e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <SystemClock_Config+0xc4>)
 8000e5e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 ffce 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e7a:	f000 f9b1 	bl	80011e0 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3798      	adds	r7, #152	; 0x98
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	00300002 	.word	0x00300002

08000e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000ed4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000ed8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee6:	4824      	ldr	r0, [pc, #144]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000ee8:	f002 f9b0 	bl	800324c <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ef2:	f000 f975 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f00:	4619      	mov	r1, r3
 8000f02:	481d      	ldr	r0, [pc, #116]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000f04:	f002 fdda 	bl	8003abc <HAL_TIM_ConfigClockSource>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000f0e:	f000 f967 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f12:	4819      	ldr	r0, [pc, #100]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000f14:	f002 f9c5 	bl	80032a2 <HAL_TIM_PWM_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000f1e:	f000 f95f 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4811      	ldr	r0, [pc, #68]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000f32:	f003 fc71 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f3c:	f000 f950 	bl	80011e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f40:	2360      	movs	r3, #96	; 0x60
 8000f42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000f5a:	f002 fc97 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000f64:	f000 f93c 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <MX_TIM2_Init+0xec>)
 8000f6a:	f000 f9c1 	bl	80012f0 <HAL_TIM_MspPostInit>

}
 8000f6e:	bf00      	nop
 8000f70:	3738      	adds	r7, #56	; 0x38
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000078 	.word	0x20000078

08000f7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	; 0x30
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <MX_TIM3_Init+0xe0>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fd0:	f002 f93c 	bl	800324c <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000fda:	f000 f901 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000fec:	f002 fd66 	bl	8003abc <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ff6:	f000 f8f3 	bl	80011e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000ffa:	4817      	ldr	r0, [pc, #92]	; (8001058 <MX_TIM3_Init+0xdc>)
 8000ffc:	f002 f9e6 	bl	80033cc <HAL_TIM_IC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001006:	f000 f8eb 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <MX_TIM3_Init+0xdc>)
 800101a:	f003 fbfd 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001024:	f000 f8dc 	bl	80011e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800102c:	2301      	movs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_TIM3_Init+0xdc>)
 8001040:	f002 fb87 	bl	8003752 <HAL_TIM_IC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800104a:	f000 f8c9 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000038 	.word	0x20000038
 800105c:	40000400 	.word	0x40000400

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001066:	4a15      	ldr	r2, [pc, #84]	; (80010bc <MX_USART2_UART_Init+0x5c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART2_UART_Init+0x58>)
 80010a4:	f003 fc62 	bl	800496c <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ae:	f000 f897 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000b8 	.word	0x200000b8
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <MX_GPIO_Init+0x110>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a3d      	ldr	r2, [pc, #244]	; (80011d0 <MX_GPIO_Init+0x110>)
 80010dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <MX_GPIO_Init+0x110>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <MX_GPIO_Init+0x110>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <MX_GPIO_Init+0x110>)
 80010f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f8:	6153      	str	r3, [r2, #20]
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <MX_GPIO_Init+0x110>)
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <MX_GPIO_Init+0x110>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <MX_GPIO_Init+0x110>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	6153      	str	r3, [r2, #20]
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <MX_GPIO_Init+0x110>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b2c      	ldr	r3, [pc, #176]	; (80011d0 <MX_GPIO_Init+0x110>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	4a2b      	ldr	r2, [pc, #172]	; (80011d0 <MX_GPIO_Init+0x110>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6153      	str	r3, [r2, #20]
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <MX_GPIO_Init+0x110>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f000 fce9 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	4823      	ldr	r0, [pc, #140]	; (80011d4 <MX_GPIO_Init+0x114>)
 8001148:	f000 fce4 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	4821      	ldr	r0, [pc, #132]	; (80011d8 <MX_GPIO_Init+0x118>)
 8001152:	f000 fcdf 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_GPIO_Init+0x11c>)
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	481a      	ldr	r0, [pc, #104]	; (80011d4 <MX_GPIO_Init+0x114>)
 800116c:	f000 fb48 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118a:	f000 fb39 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <MX_GPIO_Init+0x114>)
 80011a6:	f000 fb2b 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011aa:	2340      	movs	r3, #64	; 0x40
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_GPIO_Init+0x118>)
 80011c2:	f000 fb1d 	bl	8001800 <HAL_GPIO_Init>

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000400 	.word	0x48000400
 80011dc:	10110000 	.word	0x10110000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001226:	2007      	movs	r0, #7
 8001228:	f000 faa8 	bl	800177c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d10c      	bne.n	8001274 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001272:	e035      	b.n	80012e0 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <HAL_TIM_Base_MspInit+0xb4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d130      	bne.n	80012e0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	6153      	str	r3, [r2, #20]
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_TIM_Base_MspInit+0xb0>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ae:	2340      	movs	r3, #64	; 0x40
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012be:	2302      	movs	r3, #2
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f000 fa98 	bl	8001800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	201d      	movs	r0, #29
 80012d6:	f000 fa5c 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012da:	201d      	movs	r0, #29
 80012dc:	f000 fa75 	bl	80017ca <HAL_NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40000400 	.word	0x40000400

080012f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d11c      	bne.n	800134c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_TIM_MspPostInit+0x64>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_TIM_MspPostInit+0x64>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_TIM_MspPostInit+0x64>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800132a:	2320      	movs	r3, #32
 800132c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800133a:	2301      	movs	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f000 fa5a 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_UART_MspInit+0x7c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d128      	bne.n	80013cc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0x80>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0x80>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6153      	str	r3, [r2, #20]
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_UART_MspInit+0x80>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013aa:	230c      	movs	r3, #12
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ba:	2307      	movs	r3, #7
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f000 fa1a 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40021000 	.word	0x40021000

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f892 	bl	8001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <TIM3_IRQHandler+0x10>)
 800143e:	f002 f869 	bl	8003514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000038 	.word	0x20000038

0800144c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <SystemInit+0x28>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4a07      	ldr	r2, [pc, #28]	; (8001474 <SystemInit+0x28>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SystemInit+0x28>)
 8001462:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001466:	609a      	str	r2, [r3, #8]
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800147c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800147e:	e003      	b.n	8001488 <LoopCopyDataInit>

08001480 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001482:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001484:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001486:	3104      	adds	r1, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800148c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800148e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001490:	d3f6      	bcc.n	8001480 <CopyDataInit>
	ldr	r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001494:	e002      	b.n	800149c <LoopFillZerobss>

08001496 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001496:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001498:	f842 3b04 	str.w	r3, [r2], #4

0800149c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <LoopForever+0x16>)
	cmp	r2, r3
 800149e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014a0:	d3f9      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff ffd3 	bl	800144c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f003 febf 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff fbc9 	bl	8000c40 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80014b4:	080052d8 	.word	0x080052d8
	ldr	r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014bc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80014c0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80014c4:	2000013c 	.word	0x2000013c

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>
	...

080014cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_Init+0x28>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_Init+0x28>)
 80014d6:	f043 0310 	orr.w	r3, r3, #16
 80014da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f94d 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f808 	bl	80014f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e8:	f7ff fe82 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x54>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x58>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f965 	bl	80017e6 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e00e      	b.n	8001544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d80a      	bhi.n	8001542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f000 f92d 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001538:	4a06      	ldr	r2, [pc, #24]	; (8001554 <HAL_InitTick+0x5c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000000 	.word	0x20000000
 8001550:	20000008 	.word	0x20000008
 8001554:	20000004 	.word	0x20000004

08001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	20000138 	.word	0x20000138

08001580 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;  
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000138 	.word	0x20000138

08001598 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff ffee 	bl	8001580 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_Delay+0x40>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffde 	bl	8001580 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff3e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff31 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e160      	b.n	8001ad2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8152 	beq.w	8001acc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00b      	beq.n	8001848 <HAL_GPIO_Init+0x48>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183c:	2b11      	cmp	r3, #17
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b12      	cmp	r3, #18
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187e:	2201      	movs	r2, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0xea>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	6939      	ldr	r1, [r7, #16]
 800192e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0203 	and.w	r2, r3, #3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80ac 	beq.w	8001acc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800198c:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <HAL_GPIO_Init+0x2f4>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b6:	d025      	beq.n	8001a04 <HAL_GPIO_Init+0x204>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_GPIO_Init+0x2f8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d01f      	beq.n	8001a00 <HAL_GPIO_Init+0x200>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <HAL_GPIO_Init+0x2fc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d019      	beq.n	80019fc <HAL_GPIO_Init+0x1fc>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a4d      	ldr	r2, [pc, #308]	; (8001b00 <HAL_GPIO_Init+0x300>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_GPIO_Init+0x1f8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_GPIO_Init+0x304>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1f4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a4b      	ldr	r2, [pc, #300]	; (8001b08 <HAL_GPIO_Init+0x308>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1f0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4a      	ldr	r2, [pc, #296]	; (8001b0c <HAL_GPIO_Init+0x30c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1ec>
 80019e8:	2306      	movs	r3, #6
 80019ea:	e00c      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 80019ec:	2307      	movs	r3, #7
 80019ee:	e00a      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 80019f0:	2305      	movs	r3, #5
 80019f2:	e008      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e006      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e004      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e002      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_GPIO_Init+0x206>
 8001a04:	2300      	movs	r3, #0
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a16:	4937      	ldr	r1, [pc, #220]	; (8001af4 <HAL_GPIO_Init+0x2f4>)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a48:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_GPIO_Init+0x310>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f ae97 	bne.w	8001810 <HAL_GPIO_Init+0x10>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000
 8001af8:	48000400 	.word	0x48000400
 8001afc:	48000800 	.word	0x48000800
 8001b00:	48000c00 	.word	0x48000c00
 8001b04:	48001000 	.word	0x48001000
 8001b08:	48001400 	.word	0x48001400
 8001b0c:	48001800 	.word	0x48001800
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43d9      	mvns	r1, r3
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	400b      	ands	r3, r1
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f000 bf01 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8160 	beq.w	8001e62 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ba2:	4bae      	ldr	r3, [pc, #696]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bae:	4bab      	ldr	r3, [pc, #684]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d159      	bne.n	8001c6e <HAL_RCC_OscConfig+0xf6>
 8001bba:	4ba8      	ldr	r3, [pc, #672]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d152      	bne.n	8001c6e <HAL_RCC_OscConfig+0xf6>
 8001bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bcc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bdc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_RCC_OscConfig+0x82>
 8001bf4:	4b99      	ldr	r3, [pc, #612]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0xae>
 8001bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c12:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c16:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c22:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c2e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c32:	fa92 f2a2 	rbit	r2, r2
 8001c36:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c3a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f042 0220 	orr.w	r2, r2, #32
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f002 021f 	and.w	r2, r2, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8102 	beq.w	8001e60 <HAL_RCC_OscConfig+0x2e8>
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80fc 	bne.w	8001e60 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f000 be93 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c78:	d106      	bne.n	8001c88 <HAL_RCC_OscConfig+0x110>
 8001c7a:	4b78      	ldr	r3, [pc, #480]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a77      	ldr	r2, [pc, #476]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e030      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x134>
 8001c92:	4b72      	ldr	r3, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a71      	ldr	r2, [pc, #452]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x15a>
 8001cb8:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a67      	ldr	r2, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e00b      	b.n	8001cea <HAL_RCC_OscConfig+0x172>
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a61      	ldr	r2, [pc, #388]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d059      	beq.n	8001da8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fc44 	bl	8001580 <HAL_GetTick>
 8001cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfe:	f7ff fc3f 	bl	8001580 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d902      	bls.n	8001d14 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	f000 be40 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 8001d14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d18:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1ce>
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x1fa>
 8001d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d4a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d62:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d76:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d8a:	fab2 f282 	clz	r2, r2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0ab      	beq.n	8001cfe <HAL_RCC_OscConfig+0x186>
 8001da6:	e05c      	b.n	8001e62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fbea 	bl	8001580 <HAL_GetTick>
 8001dac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db2:	f7ff fbe5 	bl	8001580 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f000 bde6 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ddc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x282>
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x2ae>
 8001dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_RCC_OscConfig+0x2e4>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e2a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e2e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ab      	bne.n	8001db2 <HAL_RCC_OscConfig+0x23a>
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_OscConfig+0x2ea>
 8001e5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 8170 	beq.w	8002152 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e72:	4bd0      	ldr	r3, [pc, #832]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e7e:	4bcd      	ldr	r3, [pc, #820]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d16d      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3ee>
 8001e8a:	4bca      	ldr	r3, [pc, #808]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e96:	d166      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3ee>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001eaa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d102      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x350>
 8001ec2:	4bbc      	ldr	r3, [pc, #752]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0x378>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ee0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001eec:	4bb1      	ldr	r3, [pc, #708]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ef6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001f02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f042 0220 	orr.w	r2, r2, #32
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f002 021f 	and.w	r2, r2, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3ba>
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d002      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f000 bd31 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4ba0      	ldr	r3, [pc, #640]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	21f8      	movs	r1, #248	; 0xf8
 8001f42:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f4a:	fa91 f1a1 	rbit	r1, r1
 8001f4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f56:	fab1 f181 	clz	r1, r1
 8001f5a:	b2c9      	uxtb	r1, r1
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4995      	ldr	r1, [pc, #596]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f64:	e0f5      	b.n	8002152 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 8085 	beq.w	800207c <HAL_RCC_OscConfig+0x504>
 8001f72:	2301      	movs	r3, #1
 8001f74:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff faef 	bl	8001580 <HAL_GetTick>
 8001fa2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa8:	f7ff faea 	bl	8001580 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d902      	bls.n	8001fbe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f000 bceb 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001fd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_OscConfig+0x476>
 8001fe8:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	e013      	b.n	8002016 <HAL_RCC_OscConfig+0x49e>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002006:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002012:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	2202      	movs	r2, #2
 8002018:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800201c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002020:	fa92 f2a2 	rbit	r2, r2
 8002024:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002028:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800202c:	fab2 f282 	clz	r2, r2
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f042 0220 	orr.w	r2, r2, #32
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f002 021f 	and.w	r2, r2, #31
 800203c:	2101      	movs	r1, #1
 800203e:	fa01 f202 	lsl.w	r2, r1, r2
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0af      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	21f8      	movs	r1, #248	; 0xf8
 8002058:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002060:	fa91 f1a1 	rbit	r1, r1
 8002064:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002068:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800206c:	fab1 f181 	clz	r1, r1
 8002070:	b2c9      	uxtb	r1, r1
 8002072:	408b      	lsls	r3, r1
 8002074:	494f      	ldr	r1, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
 800207a:	e06a      	b.n	8002152 <HAL_RCC_OscConfig+0x5da>
 800207c:	2301      	movs	r3, #1
 800207e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800208e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fa6a 	bl	8001580 <HAL_GetTick>
 80020ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff fa65 	bl	8001580 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d902      	bls.n	80020c8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	f000 bc66 	b.w	8002994 <HAL_RCC_OscConfig+0xe1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80020da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0x580>
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x5a8>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002110:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x63c>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2202      	movs	r2, #2
 8002122:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002126:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800212a:	fa92 f2a2 	rbit	r2, r2
 800212e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002132:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002136:	fab2 f282 	clz	r2, r2
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f002 021f 	and.w	r2, r2, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f202 	lsl.w	r2, r1, r2
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1af      	bne.n	80020b2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80da 	beq.w	8002316 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d069      	beq.n	8002240 <HAL_RCC_OscConfig+0x6c8>
 800216c:	2301      	movs	r3, #1
 800216e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800217e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x640>)
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	461a      	mov	r2, r3
 8002192:	2301      	movs	r3, #1
 8002194:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff f9f3 	bl	8001580 <HAL_GetTick>
 800219a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e00d      	b.n	80021bc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f9ee 	bl	8001580 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d905      	bls.n	80021bc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e3ef      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	10908120 	.word	0x10908120
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021d4:	2202      	movs	r2, #2
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021ec:	2202      	movs	r2, #2
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	4ba4      	ldr	r3, [pc, #656]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002204:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002208:	2102      	movs	r1, #2
 800220a:	6019      	str	r1, [r3, #0]
 800220c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f1a3 	rbit	r1, r3
 8002216:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800221a:	6019      	str	r1, [r3, #0]
  return result;
 800221c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0b0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x628>
 800223e:	e06a      	b.n	8002316 <HAL_RCC_OscConfig+0x79e>
 8002240:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002256:	601a      	str	r2, [r3, #0]
  return result;
 8002258:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800225c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <HAL_RCC_OscConfig+0x920>)
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	461a      	mov	r2, r3
 800226e:	2300      	movs	r3, #0
 8002270:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff f985 	bl	8001580 <HAL_GetTick>
 8002276:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227a:	e009      	b.n	8002290 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227c:	f7ff f980 	bl	8001580 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e381      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 8002290:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022c4:	2202      	movs	r2, #2
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f2a3 	rbit	r2, r3
 80022d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80022da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022e0:	2102      	movs	r1, #2
 80022e2:	6019      	str	r1, [r3, #0]
 80022e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f1a3 	rbit	r1, r3
 80022ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022f2:	6019      	str	r1, [r3, #0]
  return result;
 80022f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1b2      	bne.n	800227c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8157 	beq.w	80025d4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d112      	bne.n	800235e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	4b56      	ldr	r3, [pc, #344]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	4a55      	ldr	r2, [pc, #340]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800233e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002342:	61d3      	str	r3, [r2, #28]
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b4f      	ldr	r3, [pc, #316]	; (800249c <HAL_RCC_OscConfig+0x924>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11a      	bne.n	80023a0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236a:	4b4c      	ldr	r3, [pc, #304]	; (800249c <HAL_RCC_OscConfig+0x924>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_RCC_OscConfig+0x924>)
 8002370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002374:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7ff f903 	bl	8001580 <HAL_GetTick>
 800237a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	e009      	b.n	8002394 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7ff f8fe 	bl	8001580 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e2ff      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x924>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x840>
 80023aa:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a39      	ldr	r2, [pc, #228]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	e02f      	b.n	8002418 <HAL_RCC_OscConfig+0x8a0>
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x864>
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a33      	ldr	r2, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0x8a0>
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x888>
 80023e6:	4b2b      	ldr	r3, [pc, #172]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a2a      	ldr	r2, [pc, #168]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0x8a0>
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002412:	f023 0304 	bic.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d06a      	beq.n	80024f8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7ff f8ad 	bl	8001580 <HAL_GetTick>
 8002426:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff f8a8 	bl	8001580 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e2a7      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 8002444:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002448:	2202      	movs	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	fa93 f2a3 	rbit	r2, r3
 800246e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002472:	601a      	str	r2, [r3, #0]
  return result;
 8002474:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002478:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x928>
 800248e:	4b01      	ldr	r3, [pc, #4]	; (8002494 <HAL_RCC_OscConfig+0x91c>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	e013      	b.n	80024bc <HAL_RCC_OscConfig+0x944>
 8002494:	40021000 	.word	0x40021000
 8002498:	10908120 	.word	0x10908120
 800249c:	40007000 	.word	0x40007000
 80024a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024a4:	2202      	movs	r2, #2
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	4bc0      	ldr	r3, [pc, #768]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024c0:	2102      	movs	r1, #2
 80024c2:	6011      	str	r1, [r2, #0]
 80024c4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	fa92 f1a2 	rbit	r1, r2
 80024ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024d2:	6011      	str	r1, [r2, #0]
  return result;
 80024d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	fab2 f282 	clz	r2, r2
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	f002 021f 	and.w	r2, r2, #31
 80024ea:	2101      	movs	r1, #1
 80024ec:	fa01 f202 	lsl.w	r2, r1, r2
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d09a      	beq.n	800242c <HAL_RCC_OscConfig+0x8b4>
 80024f6:	e063      	b.n	80025c0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7ff f842 	bl	8001580 <HAL_GetTick>
 80024fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff f83d 	bl	8001580 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e23c      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 800251a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002548:	601a      	str	r2, [r3, #0]
  return result;
 800254a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800254e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d102      	bne.n	800256a <HAL_RCC_OscConfig+0x9f2>
 8002564:	4b95      	ldr	r3, [pc, #596]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	e00d      	b.n	8002586 <HAL_RCC_OscConfig+0xa0e>
 800256a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4b8e      	ldr	r3, [pc, #568]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800258a:	2102      	movs	r1, #2
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	fa92 f1a2 	rbit	r1, r2
 8002598:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800259c:	6011      	str	r1, [r2, #0]
  return result;
 800259e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1a0      	bne.n	8002502 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025c0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d105      	bne.n	80025d4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c8:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	4a7b      	ldr	r2, [pc, #492]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 81d9 	beq.w	8002992 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	f000 81a6 	beq.w	800293a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	f040 811e 	bne.w	8002836 <HAL_RCC_OscConfig+0xcbe>
 80025fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002612:	601a      	str	r2, [r3, #0]
  return result;
 8002614:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002618:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002624:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	461a      	mov	r2, r3
 800262c:	2300      	movs	r3, #0
 800262e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe ffa6 	bl	8001580 <HAL_GetTick>
 8002634:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002638:	e009      	b.n	800264e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe ffa1 	bl	8001580 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1a2      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 800264e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002666:	601a      	str	r2, [r3, #0]
  return result;
 8002668:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800266c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0xb10>
 8002682:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb48>
 8002688:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800268c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c8:	6011      	str	r1, [r2, #0]
 80026ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	fa92 f1a2 	rbit	r1, r2
 80026d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026d8:	6011      	str	r1, [r2, #0]
  return result;
 80026da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fab2 f282 	clz	r2, r2
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f042 0220 	orr.w	r2, r2, #32
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	f002 021f 	and.w	r2, r2, #31
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d19e      	bne.n	800263a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f023 020f 	bic.w	r2, r3, #15
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	492c      	ldr	r1, [pc, #176]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 800270c:	4313      	orrs	r3, r2
 800270e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a19      	ldr	r1, [r3, #32]
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	430b      	orrs	r3, r1
 8002726:	4925      	ldr	r1, [pc, #148]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
 800272c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002730:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002744:	601a      	str	r2, [r3, #0]
  return result;
 8002746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800274a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002756:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	461a      	mov	r2, r3
 800275e:	2301      	movs	r3, #1
 8002760:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe ff0d 	bl	8001580 <HAL_GetTick>
 8002766:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276a:	e009      	b.n	8002780 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe ff08 	bl	8001580 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e109      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 8002780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa93 f2a3 	rbit	r2, r3
 8002794:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002798:	601a      	str	r2, [r3, #0]
  return result;
 800279a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800279e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d105      	bne.n	80027c0 <HAL_RCC_OscConfig+0xc48>
 80027b4:	4b01      	ldr	r3, [pc, #4]	; (80027bc <HAL_RCC_OscConfig+0xc44>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e01e      	b.n	80027f8 <HAL_RCC_OscConfig+0xc80>
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002800:	6011      	str	r1, [r2, #0]
 8002802:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fa92 f1a2 	rbit	r1, r2
 800280c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d09b      	beq.n	800276c <HAL_RCC_OscConfig+0xbf4>
 8002834:	e0ad      	b.n	8002992 <HAL_RCC_OscConfig+0xe1a>
 8002836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800283e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800284e:	601a      	str	r2, [r3, #0]
  return result;
 8002850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002854:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002860:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	461a      	mov	r2, r3
 8002868:	2300      	movs	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fe88 	bl	8001580 <HAL_GetTick>
 8002870:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002874:	e009      	b.n	800288a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe fe83 	bl	8001580 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e084      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
 800288a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800288e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	fa93 f2a3 	rbit	r2, r3
 800289e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_OscConfig+0xd4c>
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	e01b      	b.n	80028fc <HAL_RCC_OscConfig+0xd84>
 80028c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 0320 	add.w	r3, r7, #32
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f107 0318 	add.w	r3, r7, #24
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f107 0214 	add.w	r2, r7, #20
 8002900:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	f107 0214 	add.w	r2, r7, #20
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f107 0210 	add.w	r2, r7, #16
 8002914:	6011      	str	r1, [r2, #0]
  return result;
 8002916:	f107 0210 	add.w	r2, r7, #16
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d19e      	bne.n	8002876 <HAL_RCC_OscConfig+0xcfe>
 8002938:	e02b      	b.n	8002992 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e025      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <HAL_RCC_OscConfig+0xe28>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002958:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800295c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002960:	1d3b      	adds	r3, r7, #4
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d111      	bne.n	800298e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800296a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800296e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002978:	429a      	cmp	r2, r3
 800297a:	d108      	bne.n	800298e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800297c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002980:	f003 020f 	and.w	r2, r3, #15
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09e      	sub	sp, #120	; 0x78
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e162      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	498b      	ldr	r1, [pc, #556]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e14a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	497f      	ldr	r1, [pc, #508]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80dc 	beq.w	8002bd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13c      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xf6>
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xa6>
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e00f      	b.n	8002a6a <HAL_RCC_ClockConfig+0xc6>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d17b      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0f3      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d13c      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x178>
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_ClockConfig+0x128>
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e00f      	b.n	8002aec <HAL_RCC_ClockConfig+0x148>
 8002acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13a      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b2      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00d      	b.n	8002b60 <HAL_RCC_ClockConfig+0x1bc>
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	61ba      	str	r2, [r7, #24]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	617a      	str	r2, [r7, #20]
  return result;
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e079      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	491a      	ldr	r1, [pc, #104]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fcee 	bl	8001580 <HAL_GetTick>
 8002ba4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe fcea 	bl	8001580 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e061      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d214      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4906      	ldr	r1, [pc, #24]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e040      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	491a      	ldr	r1, [pc, #104]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c46:	f000 f829 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	40d3      	lsrs	r3, r2
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x2ec>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_ClockConfig+0x2f0>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x2f4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fc3c 	bl	80014f8 <HAL_InitTick>
  
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3778      	adds	r7, #120	; 0x78
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08005298 	.word	0x08005298
 8002c94:	20000000 	.word	0x20000000
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cb6:	4b2a      	ldr	r3, [pc, #168]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cca:	e03f      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cce:	623b      	str	r3, [r7, #32]
      break;
 8002cd0:	e03f      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cdc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	607a      	str	r2, [r7, #4]
  return result;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	40d3      	lsrs	r3, r2
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	220f      	movs	r2, #15
 8002d00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	60fa      	str	r2, [r7, #12]
  return result;
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e007      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	623b      	str	r3, [r7, #32]
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d4e:	623b      	str	r3, [r7, #32]
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6a3b      	ldr	r3, [r7, #32]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	372c      	adds	r7, #44	; 0x2c
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000
 8002d64:	007a1200 	.word	0x007a1200
 8002d68:	080052b0 	.word	0x080052b0
 8002d6c:	080052c0 	.word	0x080052c0

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d8e:	f7ff ffef 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d92:	4601      	mov	r1, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d9c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	fa92 f2a2 	rbit	r2, r2
 8002da8:	603a      	str	r2, [r7, #0]
  return result;
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	fab2 f282 	clz	r2, r2
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	40d3      	lsrs	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	080052a8 	.word	0x080052a8

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dd2:	f7ff ffcd 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002de0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002de4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	603a      	str	r2, [r7, #0]
  return result;
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	080052a8 	.word	0x080052a8

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b092      	sub	sp, #72	; 0x48
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80d7 	beq.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e34:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10e      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e40:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	61d3      	str	r3, [r2, #28]
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe fb83 	bl	8001580 <HAL_GetTick>
 8002e7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe fb7f 	bl	8001580 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1d6      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8084 	beq.w	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d07c      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ebc:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f0e:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d04b      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fb2f 	bl	8001580 <HAL_GetTick>
 8002f22:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fe fb2b 	bl	8001580 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e180      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	2302      	movs	r3, #2
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
  return result;
 8002f54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d108      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f6a:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	e00d      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
 8002f78:	10908100 	.word	0x10908100
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	4ba0      	ldr	r3, [pc, #640]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	613a      	str	r2, [r7, #16]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	60fa      	str	r2, [r7, #12]
  return result;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f002 021f 	and.w	r2, r2, #31
 8002faa:	2101      	movs	r1, #1
 8002fac:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0b7      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fb6:	4b95      	ldr	r3, [pc, #596]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4992      	ldr	r1, [pc, #584]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b8e      	ldr	r3, [pc, #568]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a8d      	ldr	r2, [pc, #564]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe8:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f023 0203 	bic.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4985      	ldr	r1, [pc, #532]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003006:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	497e      	ldr	r1, [pc, #504]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003024:	4b79      	ldr	r3, [pc, #484]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	4976      	ldr	r1, [pc, #472]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003042:	4b72      	ldr	r3, [pc, #456]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f023 0210 	bic.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	496f      	ldr	r1, [pc, #444]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003050:	4313      	orrs	r3, r2
 8003052:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	4967      	ldr	r1, [pc, #412]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307e:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f023 0220 	bic.w	r2, r3, #32
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4960      	ldr	r1, [pc, #384]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800309c:	4b5b      	ldr	r3, [pc, #364]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	4958      	ldr	r1, [pc, #352]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ba:	4b54      	ldr	r3, [pc, #336]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4951      	ldr	r1, [pc, #324]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4949      	ldr	r1, [pc, #292]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030f6:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4942      	ldr	r1, [pc, #264]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003114:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	493a      	ldr	r1, [pc, #232]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	4933      	ldr	r1, [pc, #204]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	492b      	ldr	r1, [pc, #172]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800316e:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	4924      	ldr	r1, [pc, #144]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003198:	491c      	ldr	r1, [pc, #112]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	4915      	ldr	r1, [pc, #84]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d4:	490d      	ldr	r1, [pc, #52]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031f2:	4906      	ldr	r1, [pc, #24]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003218:	490b      	ldr	r1, [pc, #44]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800321a:	4313      	orrs	r3, r2
 800321c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	4904      	ldr	r1, [pc, #16]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003238:	4313      	orrs	r3, r2
 800323a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3748      	adds	r7, #72	; 0x48
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e01d      	b.n	800329a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ffe0 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f000 fd3c 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e01d      	b.n	80032f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f815 	bl	80032f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f000 fd11 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fa54 	bl	80047cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <HAL_TIM_PWM_Start+0xa4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_TIM_PWM_Start+0x54>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <HAL_TIM_PWM_Start+0xa8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_TIM_PWM_Start+0x54>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1e      	ldr	r2, [pc, #120]	; (80033b8 <HAL_TIM_PWM_Start+0xac>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_TIM_PWM_Start+0x54>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_TIM_PWM_Start+0xb0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_TIM_PWM_Start+0x54>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <HAL_TIM_PWM_Start+0xb4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_TIM_PWM_Start+0x54>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <HAL_TIM_PWM_Start+0xb8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_TIM_PWM_Start+0x58>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_TIM_PWM_Start+0x5a>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <HAL_TIM_PWM_Start+0xbc>)
 8003382:	4013      	ands	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b06      	cmp	r3, #6
 800338a:	d00b      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x98>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40013400 	.word	0x40013400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	40015000 	.word	0x40015000
 80033c8:	00010007 	.word	0x00010007

080033cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e01d      	b.n	800341a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f815 	bl	8003422 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 fc7c 	bl	8003d08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d841      	bhi.n	80034cc <HAL_TIM_IC_Start_IT+0x94>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_TIM_IC_Start_IT+0x18>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003485 	.word	0x08003485
 8003454:	080034cd 	.word	0x080034cd
 8003458:	080034cd 	.word	0x080034cd
 800345c:	080034cd 	.word	0x080034cd
 8003460:	08003497 	.word	0x08003497
 8003464:	080034cd 	.word	0x080034cd
 8003468:	080034cd 	.word	0x080034cd
 800346c:	080034cd 	.word	0x080034cd
 8003470:	080034a9 	.word	0x080034a9
 8003474:	080034cd 	.word	0x080034cd
 8003478:	080034cd 	.word	0x080034cd
 800347c:	080034cd 	.word	0x080034cd
 8003480:	080034bb 	.word	0x080034bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0202 	orr.w	r2, r2, #2
 8003492:	60da      	str	r2, [r3, #12]
      break;
 8003494:	e01b      	b.n	80034ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0204 	orr.w	r2, r2, #4
 80034a4:	60da      	str	r2, [r3, #12]
      break;
 80034a6:	e012      	b.n	80034ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0208 	orr.w	r2, r2, #8
 80034b6:	60da      	str	r2, [r3, #12]
      break;
 80034b8:	e009      	b.n	80034ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0210 	orr.w	r2, r2, #16
 80034c8:	60da      	str	r2, [r3, #12]
      break;
 80034ca:	e000      	b.n	80034ce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80034cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f978 	bl	80047cc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_TIM_IC_Start_IT+0xd8>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d00b      	beq.n	8003506 <HAL_TIM_IC_Start_IT+0xce>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f4:	d007      	beq.n	8003506 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0201 	orr.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	00010007 	.word	0x00010007

08003514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b02      	cmp	r3, #2
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd faa6 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fbb4 	bl	8003ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fbbb 	bl	8003ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0204 	mvn.w	r2, #4
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fd fa7c 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fb8a 	bl	8003ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fb91 	bl	8003ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0208 	mvn.w	r2, #8
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2204      	movs	r2, #4
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fa52 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fb60 	bl	8003ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb67 	bl	8003ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b10      	cmp	r3, #16
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b10      	cmp	r3, #16
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0210 	mvn.w	r2, #16
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2208      	movs	r2, #8
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fa28 	bl	8000aa8 <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fb36 	bl	8003ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fb3d 	bl	8003ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0201 	mvn.w	r2, #1
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fb10 	bl	8003cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d10e      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b80      	cmp	r3, #128	; 0x80
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f001 f940 	bl	8004944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d2:	d10e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 f933 	bl	8004958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d10e      	bne.n	800371e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370a:	2b40      	cmp	r3, #64	; 0x40
 800370c:	d107      	bne.n	800371e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 faeb 	bl	8003cf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b20      	cmp	r3, #32
 800372a:	d10e      	bne.n	800374a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b20      	cmp	r3, #32
 8003738:	d107      	bne.n	800374a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0220 	mvn.w	r2, #32
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 f8f3 	bl	8004930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIM_IC_ConfigChannel+0x1a>
 8003768:	2302      	movs	r3, #2
 800376a:	e08a      	b.n	8003882 <HAL_TIM_IC_ConfigChannel+0x130>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11b      	bne.n	80037ba <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f000 fe5d 	bl	8004450 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 020c 	bic.w	r2, r2, #12
 80037a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6999      	ldr	r1, [r3, #24]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	619a      	str	r2, [r3, #24]
 80037b8:	e05a      	b.n	8003870 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d11c      	bne.n	80037fa <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f000 fedb 	bl	800458a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	e03a      	b.n	8003870 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f000 ff28 	bl	8004664 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 020c 	bic.w	r2, r2, #12
 8003822:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69d9      	ldr	r1, [r3, #28]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	61da      	str	r2, [r3, #28]
 8003836:	e01b      	b.n	8003870 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	6819      	ldr	r1, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f000 ff48 	bl	80046dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800385a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69d9      	ldr	r1, [r3, #28]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e105      	b.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b14      	cmp	r3, #20
 80038ba:	f200 80f0 	bhi.w	8003a9e <HAL_TIM_PWM_ConfigChannel+0x212>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	08003919 	.word	0x08003919
 80038c8:	08003a9f 	.word	0x08003a9f
 80038cc:	08003a9f 	.word	0x08003a9f
 80038d0:	08003a9f 	.word	0x08003a9f
 80038d4:	08003959 	.word	0x08003959
 80038d8:	08003a9f 	.word	0x08003a9f
 80038dc:	08003a9f 	.word	0x08003a9f
 80038e0:	08003a9f 	.word	0x08003a9f
 80038e4:	0800399b 	.word	0x0800399b
 80038e8:	08003a9f 	.word	0x08003a9f
 80038ec:	08003a9f 	.word	0x08003a9f
 80038f0:	08003a9f 	.word	0x08003a9f
 80038f4:	080039db 	.word	0x080039db
 80038f8:	08003a9f 	.word	0x08003a9f
 80038fc:	08003a9f 	.word	0x08003a9f
 8003900:	08003a9f 	.word	0x08003a9f
 8003904:	08003a1d 	.word	0x08003a1d
 8003908:	08003a9f 	.word	0x08003a9f
 800390c:	08003a9f 	.word	0x08003a9f
 8003910:	08003a9f 	.word	0x08003a9f
 8003914:	08003a5d 	.word	0x08003a5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fa90 	bl	8003e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
      break;
 8003956:	e0a3      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fb0a 	bl	8003f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	619a      	str	r2, [r3, #24]
      break;
 8003998:	e082      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fb7d 	bl	80040a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0204 	bic.w	r2, r2, #4
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	61da      	str	r2, [r3, #28]
      break;
 80039d8:	e062      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fbef 	bl	80041c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
      break;
 8003a1a:	e041      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fc3e 	bl	80042a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0208 	orr.w	r2, r2, #8
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0204 	bic.w	r2, r2, #4
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a5a:	e021      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fc88 	bl	8004378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003a9e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop

08003abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIM_ConfigClockSource+0x18>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0a8      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x16a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d067      	beq.n	8003be0 <HAL_TIM_ConfigClockSource+0x124>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d80b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x70>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d073      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x144>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d802      	bhi.n	8003b22 <HAL_TIM_ConfigClockSource+0x66>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d06f      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b20:	e078      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d06c      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x144>
 8003b26:	2b30      	cmp	r3, #48	; 0x30
 8003b28:	d06a      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b2a:	e073      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b2c:	2b70      	cmp	r3, #112	; 0x70
 8003b2e:	d00d      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0x90>
 8003b30:	2b70      	cmp	r3, #112	; 0x70
 8003b32:	d804      	bhi.n	8003b3e <HAL_TIM_ConfigClockSource+0x82>
 8003b34:	2b50      	cmp	r3, #80	; 0x50
 8003b36:	d033      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0xe4>
 8003b38:	2b60      	cmp	r3, #96	; 0x60
 8003b3a:	d041      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003b3c:	e06a      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	d066      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x156>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d017      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003b4a:	e063      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 fe16 	bl	800478c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
      break;
 8003b78:	e04c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f000 fdff 	bl	800478c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9c:	609a      	str	r2, [r3, #8]
      break;
 8003b9e:	e039      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f000 fcbd 	bl	800452c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2150      	movs	r1, #80	; 0x50
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fdcc 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e029      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f000 fd19 	bl	8004604 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2160      	movs	r1, #96	; 0x60
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fdbc 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8003bde:	e019      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	461a      	mov	r2, r3
 8003bee:	f000 fc9d 	bl	800452c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fdac 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8003bfe:	e009      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 fda3 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d831      	bhi.n	8003ca8 <HAL_TIM_ReadCapturedValue+0x78>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c81 	.word	0x08003c81
 8003c50:	08003ca9 	.word	0x08003ca9
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003ca9 	.word	0x08003ca9
 8003c5c:	08003c8b 	.word	0x08003c8b
 8003c60:	08003ca9 	.word	0x08003ca9
 8003c64:	08003ca9 	.word	0x08003ca9
 8003c68:	08003ca9 	.word	0x08003ca9
 8003c6c:	08003c95 	.word	0x08003c95
 8003c70:	08003ca9 	.word	0x08003ca9
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08003ca9 	.word	0x08003ca9
 8003c7c:	08003c9f 	.word	0x08003c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c86:	60fb      	str	r3, [r7, #12]

      break;
 8003c88:	e00f      	b.n	8003caa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	60fb      	str	r3, [r7, #12]

      break;
 8003c92:	e00a      	b.n	8003caa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	60fb      	str	r3, [r7, #12]

      break;
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	60fb      	str	r3, [r7, #12]

      break;
 8003ca6:	e000      	b.n	8003caa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ca8:	bf00      	nop
  }

  return tmpreg;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a42      	ldr	r2, [pc, #264]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d00f      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <TIM_Base_SetConfig+0x120>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3e      	ldr	r2, [pc, #248]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3d      	ldr	r2, [pc, #244]	; (8003e30 <TIM_Base_SetConfig+0x128>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <TIM_Base_SetConfig+0x12c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a31      	ldr	r2, [pc, #196]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d68:	d01b      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <TIM_Base_SetConfig+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d017      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <TIM_Base_SetConfig+0x124>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <TIM_Base_SetConfig+0x128>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <TIM_Base_SetConfig+0x130>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <TIM_Base_SetConfig+0x134>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <TIM_Base_SetConfig+0x138>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0x9a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <TIM_Base_SetConfig+0x12c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <TIM_Base_SetConfig+0x11c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <TIM_Base_SetConfig+0x100>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <TIM_Base_SetConfig+0x128>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00f      	beq.n	8003e08 <TIM_Base_SetConfig+0x100>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <TIM_Base_SetConfig+0x130>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00b      	beq.n	8003e08 <TIM_Base_SetConfig+0x100>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <TIM_Base_SetConfig+0x134>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0x100>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a11      	ldr	r2, [pc, #68]	; (8003e40 <TIM_Base_SetConfig+0x138>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0x100>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <TIM_Base_SetConfig+0x12c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	615a      	str	r2, [r3, #20]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40013400 	.word	0x40013400
 8003e34:	40015000 	.word	0x40015000
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40014400 	.word	0x40014400
 8003e40:	40014800 	.word	0x40014800

08003e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f023 0201 	bic.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0302 	bic.w	r3, r3, #2
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a30      	ldr	r2, [pc, #192]	; (8003f60 <TIM_OC1_SetConfig+0x11c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <TIM_OC1_SetConfig+0x88>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2f      	ldr	r2, [pc, #188]	; (8003f64 <TIM_OC1_SetConfig+0x120>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <TIM_OC1_SetConfig+0x88>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a2e      	ldr	r2, [pc, #184]	; (8003f68 <TIM_OC1_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_OC1_SetConfig+0x88>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <TIM_OC1_SetConfig+0x128>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_OC1_SetConfig+0x88>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <TIM_OC1_SetConfig+0x12c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_OC1_SetConfig+0x88>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a2b      	ldr	r2, [pc, #172]	; (8003f74 <TIM_OC1_SetConfig+0x130>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d10c      	bne.n	8003ee6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0308 	bic.w	r3, r3, #8
 8003ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <TIM_OC1_SetConfig+0x11c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_OC1_SetConfig+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <TIM_OC1_SetConfig+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_OC1_SetConfig+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	; (8003f68 <TIM_OC1_SetConfig+0x124>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_OC1_SetConfig+0xd2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <TIM_OC1_SetConfig+0x128>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_OC1_SetConfig+0xd2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <TIM_OC1_SetConfig+0x12c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_OC1_SetConfig+0xd2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <TIM_OC1_SetConfig+0x130>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d111      	bne.n	8003f3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40013400 	.word	0x40013400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40014400 	.word	0x40014400
 8003f70:	40014800 	.word	0x40014800
 8003f74:	40015000 	.word	0x40015000

08003f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0210 	bic.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f023 0320 	bic.w	r3, r3, #32
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	; (8004088 <TIM_OC2_SetConfig+0x110>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_OC2_SetConfig+0x74>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a2b      	ldr	r2, [pc, #172]	; (800408c <TIM_OC2_SetConfig+0x114>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_OC2_SetConfig+0x74>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2a      	ldr	r2, [pc, #168]	; (8004090 <TIM_OC2_SetConfig+0x118>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10d      	bne.n	8004008 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <TIM_OC2_SetConfig+0x110>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <TIM_OC2_SetConfig+0xc0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <TIM_OC2_SetConfig+0x114>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00f      	beq.n	8004038 <TIM_OC2_SetConfig+0xc0>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a1e      	ldr	r2, [pc, #120]	; (8004094 <TIM_OC2_SetConfig+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_OC2_SetConfig+0xc0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <TIM_OC2_SetConfig+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_OC2_SetConfig+0xc0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_OC2_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC2_SetConfig+0xc0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a17      	ldr	r2, [pc, #92]	; (8004090 <TIM_OC2_SetConfig+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d113      	bne.n	8004060 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004046:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40015000 	.word	0x40015000
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <TIM_OC3_SetConfig+0x10c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <TIM_OC3_SetConfig+0x72>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <TIM_OC3_SetConfig+0x110>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <TIM_OC3_SetConfig+0x72>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <TIM_OC3_SetConfig+0x114>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10d      	bne.n	800412e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004118:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a1e      	ldr	r2, [pc, #120]	; (80041ac <TIM_OC3_SetConfig+0x10c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <TIM_OC3_SetConfig+0xbe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <TIM_OC3_SetConfig+0x110>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00f      	beq.n	800415e <TIM_OC3_SetConfig+0xbe>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <TIM_OC3_SetConfig+0x118>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_OC3_SetConfig+0xbe>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <TIM_OC3_SetConfig+0x11c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d007      	beq.n	800415e <TIM_OC3_SetConfig+0xbe>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <TIM_OC3_SetConfig+0x120>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC3_SetConfig+0xbe>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a16      	ldr	r2, [pc, #88]	; (80041b4 <TIM_OC3_SetConfig+0x114>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40013400 	.word	0x40013400
 80041b4:	40015000 	.word	0x40015000
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800

080041c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <TIM_OC4_SetConfig+0xc8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <TIM_OC4_SetConfig+0x8c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a19      	ldr	r2, [pc, #100]	; (8004290 <TIM_OC4_SetConfig+0xcc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00f      	beq.n	8004250 <TIM_OC4_SetConfig+0x8c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <TIM_OC4_SetConfig+0xd0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00b      	beq.n	8004250 <TIM_OC4_SetConfig+0x8c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <TIM_OC4_SetConfig+0xd4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d007      	beq.n	8004250 <TIM_OC4_SetConfig+0x8c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a16      	ldr	r2, [pc, #88]	; (800429c <TIM_OC4_SetConfig+0xd8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_OC4_SetConfig+0x8c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <TIM_OC4_SetConfig+0xdc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d109      	bne.n	8004264 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40013400 	.word	0x40013400
 8004294:	40014000 	.word	0x40014000
 8004298:	40014400 	.word	0x40014400
 800429c:	40014800 	.word	0x40014800
 80042a0:	40015000 	.word	0x40015000

080042a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <TIM_OC5_SetConfig+0xbc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <TIM_OC5_SetConfig+0x82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a18      	ldr	r2, [pc, #96]	; (8004364 <TIM_OC5_SetConfig+0xc0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00f      	beq.n	8004326 <TIM_OC5_SetConfig+0x82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a17      	ldr	r2, [pc, #92]	; (8004368 <TIM_OC5_SetConfig+0xc4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00b      	beq.n	8004326 <TIM_OC5_SetConfig+0x82>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a16      	ldr	r2, [pc, #88]	; (800436c <TIM_OC5_SetConfig+0xc8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <TIM_OC5_SetConfig+0x82>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a15      	ldr	r2, [pc, #84]	; (8004370 <TIM_OC5_SetConfig+0xcc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <TIM_OC5_SetConfig+0x82>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <TIM_OC5_SetConfig+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d109      	bne.n	800433a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40013400 	.word	0x40013400
 8004368:	40014000 	.word	0x40014000
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800
 8004374:	40015000 	.word	0x40015000

08004378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	051b      	lsls	r3, r3, #20
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <TIM_OC6_SetConfig+0xc0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <TIM_OC6_SetConfig+0x84>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a19      	ldr	r2, [pc, #100]	; (800443c <TIM_OC6_SetConfig+0xc4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00f      	beq.n	80043fc <TIM_OC6_SetConfig+0x84>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a18      	ldr	r2, [pc, #96]	; (8004440 <TIM_OC6_SetConfig+0xc8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00b      	beq.n	80043fc <TIM_OC6_SetConfig+0x84>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a17      	ldr	r2, [pc, #92]	; (8004444 <TIM_OC6_SetConfig+0xcc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d007      	beq.n	80043fc <TIM_OC6_SetConfig+0x84>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a16      	ldr	r2, [pc, #88]	; (8004448 <TIM_OC6_SetConfig+0xd0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC6_SetConfig+0x84>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <TIM_OC6_SetConfig+0xd4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40013400 	.word	0x40013400
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800
 800444c:	40015000 	.word	0x40015000

08004450 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0201 	bic.w	r2, r3, #1
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <TIM_TI1_SetConfig+0xc4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d017      	beq.n	80044ae <TIM_TI1_SetConfig+0x5e>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d013      	beq.n	80044ae <TIM_TI1_SetConfig+0x5e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a23      	ldr	r2, [pc, #140]	; (8004518 <TIM_TI1_SetConfig+0xc8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00f      	beq.n	80044ae <TIM_TI1_SetConfig+0x5e>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <TIM_TI1_SetConfig+0xcc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00b      	beq.n	80044ae <TIM_TI1_SetConfig+0x5e>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a21      	ldr	r2, [pc, #132]	; (8004520 <TIM_TI1_SetConfig+0xd0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d007      	beq.n	80044ae <TIM_TI1_SetConfig+0x5e>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <TIM_TI1_SetConfig+0xd4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_TI1_SetConfig+0x5e>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <TIM_TI1_SetConfig+0xd8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d101      	bne.n	80044b2 <TIM_TI1_SetConfig+0x62>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <TIM_TI1_SetConfig+0x64>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e003      	b.n	80044d2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f023 030a 	bic.w	r3, r3, #10
 80044ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f003 030a 	and.w	r3, r3, #10
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	40015000 	.word	0x40015000

0800452c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 030a 	bic.w	r3, r3, #10
 8004568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	621a      	str	r2, [r3, #32]
}
 800457e:	bf00      	nop
 8004580:	371c      	adds	r7, #28
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800458a:	b480      	push	{r7}
 800458c:	b087      	sub	sp, #28
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 0210 	bic.w	r2, r3, #16
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	031b      	lsls	r3, r3, #12
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	621a      	str	r2, [r3, #32]
}
 80045f8:	bf00      	nop
 80045fa:	371c      	adds	r7, #28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f023 0210 	bic.w	r2, r3, #16
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800462e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	031b      	lsls	r3, r3, #12
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004640:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80046b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	69db      	ldr	r3, [r3, #28]
 80046fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800471a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	031b      	lsls	r3, r3, #12
 8004720:	b29b      	uxth	r3, r3
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800472e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	031b      	lsls	r3, r3, #12
 8004734:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	f043 0307 	orr.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2201      	movs	r2, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e06d      	b.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2f      	ldr	r2, [pc, #188]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004874:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d01d      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d018      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a16      	ldr	r2, [pc, #88]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10c      	bne.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40013400 	.word	0x40013400
 8004920:	40015000 	.word	0x40015000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40014000 	.word	0x40014000

08004930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e040      	b.n	8004a00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fc fce2 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	; 0x24
 8004998:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8c0 	bl	8004b30 <UART_SetConfig>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e022      	b.n	8004a00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 face 	bl	8004f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fb55 	bl	80050a8 <UART_CheckIdleState>
 80049fe:	4603      	mov	r3, r0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	f040 8081 	bne.w	8004b24 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_UART_Transmit+0x26>
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e079      	b.n	8004b26 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_UART_Transmit+0x38>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e072      	b.n	8004b26 <HAL_UART_Transmit+0x11e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004a54:	f7fc fd94 	bl	8001580 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d108      	bne.n	8004a86 <HAL_UART_Transmit+0x7e>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d104      	bne.n	8004a86 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e003      	b.n	8004a8e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a8e:	e02d      	b.n	8004aec <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2180      	movs	r1, #128	; 0x80
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fb49 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e03d      	b.n	8004b26 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	881a      	ldrh	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004abc:	b292      	uxth	r2, r2
 8004abe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	e008      	b.n	8004ada <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1cb      	bne.n	8004a90 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	2140      	movs	r1, #64	; 0x40
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fb15 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e009      	b.n	8004b26 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4bac      	ldr	r3, [pc, #688]	; (8004e10 <UART_SetConfig+0x2e0>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6939      	ldr	r1, [r7, #16]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a9a      	ldr	r2, [pc, #616]	; (8004e14 <UART_SetConfig+0x2e4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d121      	bne.n	8004bf4 <UART_SetConfig+0xc4>
 8004bb0:	4b99      	ldr	r3, [pc, #612]	; (8004e18 <UART_SetConfig+0x2e8>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d817      	bhi.n	8004bec <UART_SetConfig+0xbc>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x94>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be7 	.word	0x08004be7
 8004bd0:	08004bdb 	.word	0x08004bdb
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0b2      	b.n	8004d40 <UART_SetConfig+0x210>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0af      	b.n	8004d40 <UART_SetConfig+0x210>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0ac      	b.n	8004d40 <UART_SetConfig+0x210>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e0a9      	b.n	8004d40 <UART_SetConfig+0x210>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	bf00      	nop
 8004bf2:	e0a5      	b.n	8004d40 <UART_SetConfig+0x210>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a88      	ldr	r2, [pc, #544]	; (8004e1c <UART_SetConfig+0x2ec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d123      	bne.n	8004c46 <UART_SetConfig+0x116>
 8004bfe:	4b86      	ldr	r3, [pc, #536]	; (8004e18 <UART_SetConfig+0x2e8>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0a:	d012      	beq.n	8004c32 <UART_SetConfig+0x102>
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d802      	bhi.n	8004c18 <UART_SetConfig+0xe8>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <UART_SetConfig+0xf6>
 8004c16:	e012      	b.n	8004c3e <UART_SetConfig+0x10e>
 8004c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1c:	d00c      	beq.n	8004c38 <UART_SetConfig+0x108>
 8004c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c22:	d003      	beq.n	8004c2c <UART_SetConfig+0xfc>
 8004c24:	e00b      	b.n	8004c3e <UART_SetConfig+0x10e>
 8004c26:	2300      	movs	r3, #0
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e089      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e086      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c32:	2304      	movs	r3, #4
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e083      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c38:	2308      	movs	r3, #8
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e080      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c3e:	2310      	movs	r3, #16
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	bf00      	nop
 8004c44:	e07c      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <UART_SetConfig+0x2f0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d123      	bne.n	8004c98 <UART_SetConfig+0x168>
 8004c50:	4b71      	ldr	r3, [pc, #452]	; (8004e18 <UART_SetConfig+0x2e8>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c5c:	d012      	beq.n	8004c84 <UART_SetConfig+0x154>
 8004c5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c62:	d802      	bhi.n	8004c6a <UART_SetConfig+0x13a>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <UART_SetConfig+0x148>
 8004c68:	e012      	b.n	8004c90 <UART_SetConfig+0x160>
 8004c6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c6e:	d00c      	beq.n	8004c8a <UART_SetConfig+0x15a>
 8004c70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c74:	d003      	beq.n	8004c7e <UART_SetConfig+0x14e>
 8004c76:	e00b      	b.n	8004c90 <UART_SetConfig+0x160>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e060      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e05d      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c84:	2304      	movs	r3, #4
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e05a      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e057      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c90:	2310      	movs	r3, #16
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	bf00      	nop
 8004c96:	e053      	b.n	8004d40 <UART_SetConfig+0x210>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a61      	ldr	r2, [pc, #388]	; (8004e24 <UART_SetConfig+0x2f4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d123      	bne.n	8004cea <UART_SetConfig+0x1ba>
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	; (8004e18 <UART_SetConfig+0x2e8>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cae:	d012      	beq.n	8004cd6 <UART_SetConfig+0x1a6>
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb4:	d802      	bhi.n	8004cbc <UART_SetConfig+0x18c>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <UART_SetConfig+0x19a>
 8004cba:	e012      	b.n	8004ce2 <UART_SetConfig+0x1b2>
 8004cbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc0:	d00c      	beq.n	8004cdc <UART_SetConfig+0x1ac>
 8004cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cc6:	d003      	beq.n	8004cd0 <UART_SetConfig+0x1a0>
 8004cc8:	e00b      	b.n	8004ce2 <UART_SetConfig+0x1b2>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e037      	b.n	8004d40 <UART_SetConfig+0x210>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e034      	b.n	8004d40 <UART_SetConfig+0x210>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e031      	b.n	8004d40 <UART_SetConfig+0x210>
 8004cdc:	2308      	movs	r3, #8
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e02e      	b.n	8004d40 <UART_SetConfig+0x210>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	bf00      	nop
 8004ce8:	e02a      	b.n	8004d40 <UART_SetConfig+0x210>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a4e      	ldr	r2, [pc, #312]	; (8004e28 <UART_SetConfig+0x2f8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d123      	bne.n	8004d3c <UART_SetConfig+0x20c>
 8004cf4:	4b48      	ldr	r3, [pc, #288]	; (8004e18 <UART_SetConfig+0x2e8>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d00:	d012      	beq.n	8004d28 <UART_SetConfig+0x1f8>
 8004d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d06:	d802      	bhi.n	8004d0e <UART_SetConfig+0x1de>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <UART_SetConfig+0x1ec>
 8004d0c:	e012      	b.n	8004d34 <UART_SetConfig+0x204>
 8004d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d12:	d00c      	beq.n	8004d2e <UART_SetConfig+0x1fe>
 8004d14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d18:	d003      	beq.n	8004d22 <UART_SetConfig+0x1f2>
 8004d1a:	e00b      	b.n	8004d34 <UART_SetConfig+0x204>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e00e      	b.n	8004d40 <UART_SetConfig+0x210>
 8004d22:	2302      	movs	r3, #2
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e00b      	b.n	8004d40 <UART_SetConfig+0x210>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e008      	b.n	8004d40 <UART_SetConfig+0x210>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e005      	b.n	8004d40 <UART_SetConfig+0x210>
 8004d34:	2310      	movs	r3, #16
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	bf00      	nop
 8004d3a:	e001      	b.n	8004d40 <UART_SetConfig+0x210>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	f040 8090 	bne.w	8004e6c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d86c      	bhi.n	8004e2c <UART_SetConfig+0x2fc>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x228>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004dbd 	.word	0x08004dbd
 8004d64:	08004e2d 	.word	0x08004e2d
 8004d68:	08004dd9 	.word	0x08004dd9
 8004d6c:	08004e2d 	.word	0x08004e2d
 8004d70:	08004e2d 	.word	0x08004e2d
 8004d74:	08004e2d 	.word	0x08004e2d
 8004d78:	08004df9 	.word	0x08004df9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fe f804 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004d80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	005a      	lsls	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	61bb      	str	r3, [r7, #24]
        break;
 8004d9a:	e04a      	b.n	8004e32 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d9c:	f7fe f816 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004da0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	61bb      	str	r3, [r7, #24]
        break;
 8004dba:	e03a      	b.n	8004e32 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004dc6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	61bb      	str	r3, [r7, #24]
        break;
 8004dd6:	e02c      	b.n	8004e32 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dd8:	f7fd ff60 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004ddc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	005a      	lsls	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	441a      	add	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	61bb      	str	r3, [r7, #24]
        break;
 8004df6:	e01c      	b.n	8004e32 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	61bb      	str	r3, [r7, #24]
        break;
 8004e0e:	e010      	b.n	8004e32 <UART_SetConfig+0x302>
 8004e10:	efff69f3 	.word	0xefff69f3
 8004e14:	40013800 	.word	0x40013800
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40004400 	.word	0x40004400
 8004e20:	40004800 	.word	0x40004800
 8004e24:	40004c00 	.word	0x40004c00
 8004e28:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
        break;
 8004e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d916      	bls.n	8004e66 <UART_SetConfig+0x336>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3e:	d212      	bcs.n	8004e66 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f023 030f 	bic.w	r3, r3, #15
 8004e48:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	897a      	ldrh	r2, [r7, #10]
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	e072      	b.n	8004f4c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75fb      	strb	r3, [r7, #23]
 8004e6a:	e06f      	b.n	8004f4c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004e6c:	7ffb      	ldrb	r3, [r7, #31]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d85b      	bhi.n	8004f2a <UART_SetConfig+0x3fa>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x348>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ebb 	.word	0x08004ebb
 8004e80:	08004ed9 	.word	0x08004ed9
 8004e84:	08004f2b 	.word	0x08004f2b
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004f2b 	.word	0x08004f2b
 8004e90:	08004f2b 	.word	0x08004f2b
 8004e94:	08004f2b 	.word	0x08004f2b
 8004e98:	08004f13 	.word	0x08004f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fd ff74 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004ea0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	085a      	lsrs	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	441a      	add	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	61bb      	str	r3, [r7, #24]
        break;
 8004eb8:	e03a      	b.n	8004f30 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eba:	f7fd ff87 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004ebe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	085a      	lsrs	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
        break;
 8004ed6:	e02b      	b.n	8004f30 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004ee2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6852      	ldr	r2, [r2, #4]
 8004eea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	61bb      	str	r3, [r7, #24]
        break;
 8004ef2:	e01d      	b.n	8004f30 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef4:	f7fd fed2 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8004ef8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	085a      	lsrs	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	441a      	add	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	61bb      	str	r3, [r7, #24]
        break;
 8004f10:	e00e      	b.n	8004f30 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	61bb      	str	r3, [r7, #24]
        break;
 8004f28:	e002      	b.n	8004f30 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
        break;
 8004f2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d908      	bls.n	8004f48 <UART_SetConfig+0x418>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d204      	bcs.n	8004f48 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	e001      	b.n	8004f4c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01a      	beq.n	800507a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005062:	d10a      	bne.n	800507a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
  }
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80050b6:	f7fc fa63 	bl	8001580 <HAL_GetTick>
 80050ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d10e      	bne.n	80050e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f82a 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e020      	b.n	800512a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d10e      	bne.n	8005114 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f814 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e00a      	b.n	800512a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005142:	e05d      	b.n	8005200 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d059      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fc fa18 	bl	8001580 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <UART_WaitOnFlagUntilTimeout+0x30>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11b      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005170:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e042      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d02b      	beq.n	8005200 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b6:	d123      	bne.n	8005200 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e00f      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4013      	ands	r3, r2
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	bf0c      	ite	eq
 8005210:	2301      	moveq	r3, #1
 8005212:	2300      	movne	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	429a      	cmp	r2, r3
 800521c:	d092      	beq.n	8005144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4e0d      	ldr	r6, [pc, #52]	; (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 800522e:	1ba4      	subs	r4, r4, r6
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2500      	movs	r5, #0
 8005234:	42a5      	cmp	r5, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4e0b      	ldr	r6, [pc, #44]	; (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	; (800526c <__libc_init_array+0x44>)
 800523c:	f000 f820 	bl	8005280 <_init>
 8005240:	1ba4      	subs	r4, r4, r6
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2500      	movs	r5, #0
 8005246:	42a5      	cmp	r5, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005250:	4798      	blx	r3
 8005252:	3501      	adds	r5, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800525a:	4798      	blx	r3
 800525c:	3501      	adds	r5, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	080052d0 	.word	0x080052d0
 8005264:	080052d0 	.word	0x080052d0
 8005268:	080052d0 	.word	0x080052d0
 800526c:	080052d4 	.word	0x080052d4

08005270 <memset>:
 8005270:	4402      	add	r2, r0
 8005272:	4603      	mov	r3, r0
 8005274:	4293      	cmp	r3, r2
 8005276:	d100      	bne.n	800527a <memset+0xa>
 8005278:	4770      	bx	lr
 800527a:	f803 1b01 	strb.w	r1, [r3], #1
 800527e:	e7f9      	b.n	8005274 <memset+0x4>

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
